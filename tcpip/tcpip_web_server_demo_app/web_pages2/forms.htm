~inc:header.inc~
<div id="content">


<h1>CST 417</h1>
<h2>Lab 05</h2>


<form method="get" action="forms.htm">
<div class="examplebox">
<b>Destination Address</b> (Must be 3 digits per octet): <input type="text" name="address" maxlength="15" value="~formVariable(1)~"> &nbsp; <input type="submit" value="Save">
</div>
</form>

<form method="get" action="forms.htm">
<div class="examplebox">
<b>UDP Port:</b> <input type="text" name="port" maxlength="6" value="~formVariable(2)~"> &nbsp; <input type="submit" value="Save">
</div>
</form>

<form method="get" action="forms.htm">
<div class="examplebox">
<b>Message to Send</b> (128 chars max): <input type="text" name="message" maxlength="128" value="~formVariable(3)~"> &nbsp; <input type="submit" value="Save">
</div>
</form>

</br>
</br>
</br>
</br>
</br>
</br>
</br>
</br>




<h1>Form Processing</h1>

<p>Your application will likely need to accept data from the user.  Forms allow
you to do just that.  Forms can be submitted in one of two methods (<i>GET</i> and 
<i>POST</i>), and this server supports both.</p>

<h6></h6>

<p>The <b>GET</b> method appends the data to the end of the URI.  You'll see this 
data following the question mark (?) in your browser's address bar.  For Microchip's 
embedded server, this data is limited to around 80 bytes.  However, this sort of 
submission is generally easier to process. Data sent via GET is automatically 
decoded, and stored in the array <code>curHTTP.data</code>.  Your application will
handle the data in the <code>HTTPExecuteGet</code> callback.  The functions 
<code>HTTPGetArg</code> and <code>HTTPGetROMArg</code> provide an easy 
method to retrieve submitted values for processing.</p>

<p>As an example, this GET form controls several LEDs on the demo board:</p>

<form method="get" action="forms.htm">
<div class="examplebox">
<b>5:</b> <select name="led5"><option value="1" ~ledSelected(5,true)~>On</option><option value="0" ~ledSelected(5,false)~>Off</option></select>&nbsp; 
<b>4:</b> <select name="led4"><option value="1" ~ledSelected(4,true)~>On</option><option value="0" ~ledSelected(4,false)~>Off</option></select>&nbsp; 
<b>3:</b> <select name="led3"><option value="1" ~ledSelected(3,true)~>On</option><option value="0" ~ledSelected(3,false)~>Off</option></select>&nbsp; 
<b>2:</b> <select name="led2"><option value="1" ~ledSelected(2,true)~>On</option><option value="0" ~ledSelected(2,false)~>Off</option></select>&nbsp; 
<b>1:</b> <select name="led1"><option value="1" ~ledSelected(1,true)~>On</option><option value="0" ~ledSelected(1,false)~>Off</option></select>&nbsp; 
<br /><input type="submit" value="Save" style="margin-top:5px;">
</div>
</form>

<h6></h6>

<p>The <b>POST</b> method submits the data after the request headers are 
sent.  This allows the data to be virtually unlimited in length, as long as your 
application can process it in chunks.  However, your application must manage 
the receipt of data, so it is generally more complicated.</p>

<p>As an example, this POST form sets the text shown on the LCD display:</p>

<form method="post" action="forms.htm">
<div class="examplebox">
<b>LCD:</b> <input type="text" name="lcd" maxlength="32"> &nbsp; <input type="submit" value="Save">
</div>
</form>

</div>

<script type="text/javascript">
<!--
document.getElementById('hello').innerHTML = "~hellomsg~";
-->
</script>
~inc:footer.inc~